import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  SafeAreaView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { Game, GameFormData } from '../models/game';
import { mockGames } from '../data/game-data';
import { styles } from '../styles/gameListStyles';
import GameCard from './GameCard';
import GameForm from './GameForm';
import { storageService } from '../utils/storage';

export default function GameList() {
  const [games, setGames] = useState<Game[]>([]);
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–≥–æ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
  useEffect(() => {
    loadGamesFromStorage();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä
  useEffect(() => {
    if (!isLoading && games.length > 0) {
      saveGamesToStorage();
    }
  }, [games]);

  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–≥–æ—Ä
  const loadGamesFromStorage = async () => {
    try {
      setIsLoading(true);
      const savedGames = await storageService.loadGames();
      
      if (savedGames && savedGames.length > 0) {
        setGames(savedGames);
        console.log(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${savedGames.length} —ñ–≥–æ—Ä –∑ —Å—Ö–æ–≤–∏—â–∞`);
      } else {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —ñ–≥–æ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –¥–∞–Ω—ñ
        setGames(mockGames);
        console.log('üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–≥—Ä–∏');
      setGames(mockGames); // Fallback –Ω–∞ mock –¥–∞–Ω—ñ
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–≥–æ—Ä
  const saveGamesToStorage = async () => {
    try {
      await storageService.saveGames(games);
      console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${games.length} —ñ–≥–æ—Ä`);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
    }
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏
  const handleAddGame = async (formData: GameFormData) => {
    const newGame: Game = {
      id: Date.now(), // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –Ω–∞ –æ—Å–Ω–æ–≤—ñ timestamp
      title: formData.title,
      price: parseFloat(formData.price),
      description: formData.description,
      category: formData.category,
      image: formData.image || 'https://via.placeholder.com/500',
      releaseDate: formData.releaseDate,
      rating: formData.rating,
      sold: false,
    };

    const updatedGames = [newGame, ...games];
    setGames(updatedGames);

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    Alert.alert('‚úÖ –£—Å–ø—ñ—Ö', `–ì—Ä—É "${newGame.title}" –¥–æ–¥–∞–Ω–æ!`);
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏
  const handleDeleteGame = (id: number) => {
    Alert.alert(
      '–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É?',
      '–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞',
      [
        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', style: 'cancel' },
        {
          text: '–í–∏–¥–∞–ª–∏—Ç–∏',
          style: 'destructive',
          onPress: () => {
            const updatedGames = games.filter(game => game.id !== id);
            setGames(updatedGames);
          },
        },
      ]
    );
  };

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É "–ø—Ä–æ–¥–∞–Ω–æ"
  const handleToggleSold = (id: number) => {
    const updatedGames = games.map(game =>
      game.id === id ? { ...game, sold: !game.sold } : game
    );
    setGames(updatedGames);
  };

  // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  const handleClearAll = () => {
    Alert.alert(
      'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ?',
      '–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ —ñ–≥—Ä–∏ –∑—ñ —Å—Ö–æ–≤–∏—â–∞',
      [
        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', style: 'cancel' },
        {
          text: '–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ',
          style: 'destructive',
          onPress: async () => {
            await storageService.clearGames();
            setGames(mockGames);
            Alert.alert('‚úÖ', '–í—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ');
          },
        },
      ]
    );
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.centerContent}>
          <ActivityIndicator size="large" color="#3B82F6" />
          <Text style={styles.loadingText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–≥–æ—Ä...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>üéÆ –Ü–≥—Ä–∏ 2024</Text>
        <Text style={styles.subtitle}>
          {games.length} {games.length === 1 ? '–≥—Ä–∞' : '—ñ–≥–æ—Ä'} –¥–æ—Å—Ç—É–ø–Ω–æ
        </Text>
        
        {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è) */}
        <TouchableOpacity 
          onPress={handleClearAll}
          style={{ marginTop: 8 }}
        >
          <Text style={{ color: '#EF4444', fontSize: 12 }}>
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ö–æ–≤–∏—â–µ
          </Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={games}
        keyExtractor={item => item.id.toString()}
        renderItem={({ item }) => (
          <TouchableOpacity
            onLongPress={() => handleDeleteGame(item.id)}
            onPress={() => handleToggleSold(item.id)}
          >
            <GameCard item={item} />
          </TouchableOpacity>
        )}
        contentContainerStyle={styles.list}
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>üì¶ –ù–µ–º–∞—î —ñ–≥–æ—Ä</Text>
            <Text style={styles.emptySubtext}>
              –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "+" —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É
            </Text>
          </View>
        }
      />

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è */}
      <TouchableOpacity
        style={styles.addButtonContainer}
        onPress={() => setIsFormVisible(true)}
      >
        <Text style={styles.addButton}>Ôºã</Text>
      </TouchableOpacity>

      {/* –§–æ—Ä–º–∞ */}
      <GameForm
        visible={isFormVisible}
        onClose={() => setIsFormVisible(false)}
        onSubmit={handleAddGame}
      />
    </SafeAreaView>
  );
}
